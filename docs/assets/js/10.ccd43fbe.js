(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{222:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"asynchronous-programming-concepts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#asynchronous-programming-concepts"}},[t._v("#")]),t._v(" Asynchronous programming concepts")]),t._v(" "),e("p",[t._v("There are basically two kinds of processing; synchronous and asynchronous.\nSynchronous processing blocks the current Thread until processing is complete.\nAsynchronous processing doesn't block the current Thread,\ninstead of waiting, Thread will work on other tasks in the mean time.\nAsynchronous applications are more difficult to design,\nbut they can handle thousands of parallel requests,\nwhile synchronous applications are limited by the maximum number of Threads that can be run.\nThere are many different forms and implementations of asynchronous processing in Java, such as:")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/puniverse/quasar",target:"_blank",rel:"noopener noreferrer"}},[t._v("Quasar"),e("OutboundLink")],1),t._v(": Quasar uses non-blocking "),e("a",{attrs:{href:"https://docs.paralleluniverse.co/quasar/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lightweight Threads"),e("OutboundLink")],1),t._v(' called "Fibers"')]),t._v(" "),e("li",[e("a",{attrs:{href:"https://projectreactor.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reactor"),e("OutboundLink")],1),t._v(": Reactor uses "),e("a",{attrs:{href:"https://github.com/reactive-streams/reactive-streams-jvm",target:"_blank",rel:"noopener noreferrer"}},[t._v("Reactive Streams"),e("OutboundLink")],1),t._v(" for building reactive applications")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://vertx.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vert.x"),e("OutboundLink")],1),t._v(": The core Vert.x components use "),e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Callback_(computer_programming)",target:"_blank",rel:"noopener noreferrer"}},[t._v("Callbacks"),e("OutboundLink")],1),t._v("\nand there are modules for "),e("a",{attrs:{href:"https://github.com/ReactiveX/RxJava",target:"_blank",rel:"noopener noreferrer"}},[t._v("RxJava"),e("OutboundLink")],1),t._v(" and Quasar")])]),t._v(" "),e("p",[t._v('To summarize the essence of "Moleculer for Java" in a similar way, we could describe this:')]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://moleculer-java.github.io/moleculer-java/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Moleculer"),e("OutboundLink")],1),t._v(": Moleculer uses "),e("a",{attrs:{href:"https://berkesa.github.io/datatree-promise/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Promises"),e("OutboundLink")],1),t._v('\nand manages sequential flow controls through "'),e("em",[t._v("then().then().then()")]),t._v('"\n'),e("router-link",{attrs:{to:"/concepts.html#non-blocking-json-processing"}},[t._v("chaining")]),t._v(" of Promises")],1)]),t._v(" "),e("h2",{attrs:{id:"javascript-and-java-parallels"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-and-java-parallels"}},[t._v("#")]),t._v(" JavaScript and Java parallels")]),t._v(" "),e("p",[t._v("Java and Node.js-based Moleculer have the "),e("strong",[t._v("same internal architecture")]),t._v(" as possible for these two languages.\nMost internal objects and properties have the same names in both implementations.\nAfter a relatively short period of time, Java programmers understand the code of a Node.js-based Moleculer service and vice versa.\nThis help to increase the skills of the programmers and make their collaboration more efficient.")]),t._v(" "),e("p",[t._v("Most Moleculer modules do not require any specific explanation, they are quite similar in use in the two programming languages\n(such modules include\n"),e("router-link",{attrs:{to:"/caching.html#caching-action-calls"}},[t._v("Cachers")]),t._v(",\n"),e("router-link",{attrs:{to:"/transporters.html#types-of-transporters"}},[t._v("Transporters")]),t._v(",\n"),e("router-link",{attrs:{to:"/serializers.html#about-data-serialization"}},[t._v("Serializers")]),t._v('\nand other high-level "building blocks").\nHowever, a low-level "building block", the dynamic '),e("em",[t._v("JavaScript object")]),t._v(',\ncannot be easily implemented in a statically-typed language.\nThe next chapter is about how to effectively handle the JavaScript/JSON data structures in Moleculer Java,\nand how to organize asynchronous "JSON functions" into a workflow.')],1),t._v(" "),e("h2",{attrs:{id:"datatree-api-for-javascript-objects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#datatree-api-for-javascript-objects"}},[t._v("#")]),t._v(" DataTree API for JavaScript objects")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("Services")]),t._v(" send packets of structured hierarchical data to each other during communication.\nBecause the "),e("code",[t._v("Services")]),t._v(" can be remotely hosted,\nservices send and receive JSON data during their communication.\nIn the Node.js-based Moleculer implementation, the\ntransferable data corresponds to JavaScript objects.\nA JavaScript object is a collection of named values, eg.:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JavaScript code")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" params "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("param1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              param2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              param3"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12345678")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              param3"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("There is no similar native support for dynamic creation of JSON objects in Java language.\nBecause of this, Moleculer uses an\n"),e("a",{attrs:{href:"https://berkesa.github.io/datatree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("abstract API"),e("OutboundLink")],1),t._v("\ninstead of a certain JSON implementation.\nThe "),e("code",[t._v("io.datatree.Tree")]),t._v(" object is an "),e("strong",[t._v("abstract layer")]),t._v(" that uses an arbitrary JSON implementation.\n"),e("code",[t._v("Tree")]),t._v(" API supports 18 popular\n"),e("router-link",{attrs:{to:"/serializers.html#json-serializer"}},[t._v("JSON implementations")]),t._v(" (eg. Jackson, Gson, Boon, Jodd, FastJson),\nand 10 non-JSON data formats (YAML, ION, BSON, MessagePack, etc.).\nJava-based JSON (and non-JSON) APIs are constantly evolving,\nso no specific implementation is forced on developers.\nThe following Java code snippet builds similar JSON structure like the previous JavaScript code:")],1),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Java code")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tree")]),t._v(" params "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tree")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nparams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nparams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nparams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param3"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12345678")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nparams"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param4"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The following Java statement...")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("... will print this:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"param1"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"param2"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"param3"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("12345678")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"param4"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("In addition, the "),e("code",[t._v("Tree")]),t._v(" API provides some useful features:")]),t._v(" "),e("ul",[e("li",[t._v("JSON path functions ("),e("code",[t._v('tree.get("cities[2].location")')]),t._v(")")]),t._v(" "),e("li",[t._v("Easy iteration over Java Collections and Maps ("),e("code",[t._v("for (Tree child: parent)")]),t._v(")")]),t._v(" "),e("li",[t._v("Recursive deep cloning ("),e("code",[t._v("Tree copy = tree.clone()")]),t._v(")")]),t._v(" "),e("li",[t._v("Support for all Java types of Appache Cassandra ("),e("code",[t._v("BigDecimal")]),t._v(", "),e("code",[t._v("UUID")]),t._v(", "),e("code",[t._v("InetAddress")]),t._v(", etc.)")]),t._v(" "),e("li",[t._v("Support for all Java types of MongoDB ("),e("code",[t._v("BsonNumber")]),t._v(", "),e("code",[t._v("BsonNull")]),t._v(", "),e("code",[t._v("BsonString")]),t._v(", "),e("code",[t._v("BsonBoolean")]),t._v(", etc.)")]),t._v(" "),e("li",[t._v("Root and parent pointers, methods to traverse the data structure ("),e("code",[t._v("tree.getParent()")]),t._v(" or "),e("code",[t._v("tree.getRoot()")]),t._v(")")]),t._v(" "),e("li",[t._v("Methods for type-check ("),e("code",[t._v("Class valueClass = tree.getType()")]),t._v(")")]),t._v(" "),e("li",[t._v("Methods for modify the type of the underlying Java value ("),e("code",[t._v("tree.setType(String.class)")]),t._v(")")]),t._v(" "),e("li",[t._v("Method chaining ("),e("code",[t._v('tree.put("name1", "value1").put("name2", "value2")')]),t._v(")")]),t._v(" "),e("li",[t._v("Merging, filtering structures ("),e("code",[t._v("tree.copyFrom(source)")]),t._v(", "),e("code",[t._v("tree.find(condition)")]),t._v(", etc.)")])]),t._v(" "),e("p",[t._v("In summary, Node.js-based Moleculer "),e("code",[t._v("Services")]),t._v(" sends and receives JavaScript objects.\nThe equivalent is the "),e("code",[t._v("Tree")]),t._v(" object in the Java-based Moleculer.")]),t._v(" "),e("h2",{attrs:{id:"avoid-reflection"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#avoid-reflection"}},[t._v("#")]),t._v(" Avoid reflection")]),t._v(" "),e("p",[t._v("The Reflection API is a powerful feature of the Java language.\nWith the API, the Java program can create an object or call a method on the fly.\nFrom execution prospective, the calls to reflection API are quite expensive,\nit could have a performance impact on the applications.\nBecause of this, Moleculer uses the reflection API in very few cases. For example\n"),e("router-link",{attrs:{to:"/actions.html#about-actions"}},[t._v("Actions")]),t._v(" and event "),e("router-link",{attrs:{to:"/events.html#types-of-event-broadcasts"}},[t._v("Listeners")]),t._v("\nare not methods but Functional Interfaces.\nCalling them is much faster than calling methods using the Reflection API.")],1),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Actions and Listeners are Functional Interfaces")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Action")]),t._v(" action "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Listener")]),t._v(" listener "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"no-object-mapping"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#no-object-mapping"}},[t._v("#")]),t._v(" No object mapping")]),t._v(" "),e("p",[t._v("For the sake of simplicity, and similarity to Node.js version, Moleculer does not use "),e("em",[t._v("Java Object Mappers")]),t._v('.\nThe data is received, processed and returned in "raw" JSON format.\nObject Mapper\'s are useful when starting the system,\nand we process configuration files using the Spring Framework, for example.\nHowever, it is faster at runtime if the incoming data packet is received immediately\nafter parsing it from the binary (JSON, MessagePack, etc.) format.\nThe '),e("a",{attrs:{href:"https://berkesa.github.io/datatree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tree"),e("OutboundLink")],1),t._v("\ndata type helps in accurate type conversion, even allowing you to specify default values.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Input and output data are in "raw" JSON format')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Action")]),t._v(" action "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Process input:")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     "key1": "abc",')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     "key2": 12345')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" value1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" value2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("params"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"key2"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0d")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Generate output:")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     "result": "ok"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tree")]),t._v(" out "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tree")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"result"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ok"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The input for "),e("code",[t._v("Action")]),t._v(" and event "),e("code",[t._v("Listener")]),t._v(" is always a\n"),e("router-link",{attrs:{to:"/actions.html#context"}},[t._v("Context")]),t._v("\n(which has metadata besides input JSON, such as who sent the message).\nThe returned value cannot be a POJO (Plain Old Java Object with getter/setter methods),\nsuch values must be converted to a "),e("code",[t._v("Tree")]),t._v(" object.\nThe output can be one of the following:")],1),t._v(" "),e("ul",[e("li",[e("em",[t._v("null")])]),t._v(" "),e("li",[t._v("String")]),t._v(" "),e("li",[e("em",[t._v("Numbers:")]),t._v(" byte, short, int, long, float, double, "),e("code",[t._v("BigDecimal")]),t._v(", "),e("code",[t._v("BigInteger")])]),t._v(" "),e("li",[t._v("boolean")]),t._v(" "),e("li",[t._v("byte array")]),t._v(" "),e("li",[e("code",[t._v("java.util.Date")])]),t._v(" "),e("li",[e("code",[t._v("java.util.UUID")])]),t._v(" "),e("li",[e("code",[t._v("java.net.InetAddress")])]),t._v(" "),e("li",[e("code",[t._v("Tree")]),t._v(" object (hierarchical data structure from the above types)")]),t._v(" "),e("li",[e("code",[t._v("Promise")]),t._v(" object (it's like an asynchronous "),e("code",[t._v("Tree")]),t._v(")")]),t._v(" "),e("li",[e("code",[t._v("PacketStream")]),t._v(" object (for transferring large, binary files)")])]),t._v(" "),e("h2",{attrs:{id:"non-blocking-json-processing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#non-blocking-json-processing"}},[t._v("#")]),t._v(" Non-blocking JSON processing")]),t._v(" "),e("p",[t._v("Moleculer uses ES6-like\n"),e("a",{attrs:{href:"https://berkesa.github.io/datatree-promise/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Promises"),e("OutboundLink")],1),t._v("\n(based on the Java8's "),e("code",[t._v("CompletableFuture")]),t._v(" API) to avoid\n"),e("a",{attrs:{href:"https://www.google.com/search?q=callback+hell+promise",target:"_blank",rel:"noopener noreferrer"}},[t._v("callback hell"),e("OutboundLink")],1),t._v(".\nAn "),e("code",[t._v("io.datatree.Promise")]),t._v(" is an object that may produce a simple value (or a "),e("code",[t._v("Tree")]),t._v(" object) some time in the future:\neither a resolved value, or a reason that it's not resolved (e.g., a network error occurred).\n"),e("code",[t._v("Promise")]),t._v(" users can attach callbacks to handle the fulfilled "),e("code",[t._v("Tree")]),t._v(" or the reason for rejection.")]),t._v(" "),e("p",[t._v("The main difference between Promise-based operation of other systems and Moleculer\nis that the Moleculer "),e("code",[t._v("Promise")]),t._v(' object works with "raw" JSON objects.\nThe value of a Moleculer '),e("code",[t._v("Promise")]),t._v(", which you get after the asynchronous processing,\nis always a "),e("code",[t._v("Tree")]),t._v(" object.\nThis "),e("code",[t._v("Tree")]),t._v(" structure may come from other "),e("code",[t._v("Services")]),t._v(" or from asynchronous APIs.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Sequential "waterfall" processing of Promises')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Action")]),t._v(" anAction "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Invoke the firs async method; this method returns a Promise,")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// the "next" is called when the Promise value is assigned')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callAsyncMethod1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rsp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Response of previous call (in a "Tree" object)')]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Process response and call next async method")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callAsyncMethod2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rsp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rsp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Response of previous call")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Process response and call next async method")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callAsyncMethod3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rsp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catchError")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Throwable of previous calls")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Handle error and call next async method")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callAsyncMethod4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rsp "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Response of previous call")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Process response and call last async method")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callAsyncMethod5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rsp"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("router-link",{attrs:{to:"/performance-tips.html#use-non-blocking-apis"}},[t._v("Read more about Promises")]),t._v("\nor continue to the\n"),e("router-link",{attrs:{to:"/broker.html#introduction-to-service-broker"}},[t._v("next")]),t._v(" chapter.")],1)])}),[],!1,null,null,null);a.default=n.exports}}]);