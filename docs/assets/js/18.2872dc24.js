(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{10:function(e,t,s){"use strict";function r(e,t,s,r,n,o,a,v){var i,l="function"==typeof e?e.options:e;if(t&&(l.render=t,l.staticRenderFns=s,l._compiled=!0),r&&(l.functional=!0),o&&(l._scopeId="data-v-"+o),a?(i=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),n&&n.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},l._ssrRegister=i):n&&(i=v?function(){n.call(this,this.$root.$options.shadowRoot)}:n),i)if(l.functional){l._injectStyles=i;var c=l.render;l.render=function(e,t){return i.call(t),c(e,t)}}else{var _=l.beforeCreate;l.beforeCreate=_?[].concat(_,i):[i]}return{exports:e,options:l}}s.d(t,"a",(function(){return r}))},222:function(e,t,s){"use strict";s.r(t);var r=s(10),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("Moleculer Runner is a helper script that helps you running Moleculer projects. With it you don't need to create a ServiceBroker instance with options. Instead you can create a "),s("code",[e._v("moleculer.config.js")]),e._v(" or "),s("code",[e._v("moleculer.config.json")]),e._v(" file in the root of repo with broker options. Then simply call the "),s("code",[e._v("moleculer-runner")]),e._v(" in NPM script and it will automatically load the configuration file, create the broker and load the services. Alternatively, you can declare your configuration as environment variables.")]),e._v(" "),s("p",[e._v("{% note info Production-ready %}\nIn production, we recommend putting options into the environment variables! Use the "),s("code",[e._v("moleculer.config.js")]),e._v(" only during development or store only common options.\n:::")]),e._v(" "),s("h2",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[e._v("#")]),e._v(" Syntax")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ moleculer-runner [options] [service files or directories or glob masks]\n")])])]),s("blockquote",[s("p",[e._v("Note: It runs in this format in NPM scripts only. To call it directly from your console, use the "),s("code",[e._v("./node_modules/.bin/moleculer-runner --repl")]),e._v(" or "),s("code",[e._v("node ./node_modules/moleculer/bin/moleculer-runner.js --repl")]),e._v(" format.")])]),e._v(" "),s("h2",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" Options")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Option")]),e._v(" "),s("th",[e._v("Type")]),e._v(" "),s("th",[e._v("Default")]),e._v(" "),s("th",[e._v("Description")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[s("code",[e._v("-r")]),e._v(", "),s("code",[e._v("--repl")])]),e._v(" "),s("td",[s("code",[e._v("Boolean")])]),e._v(" "),s("td",[s("code",[e._v("false")])]),e._v(" "),s("td",[e._v("If true, it switches to "),s("router-link",{attrs:{to:"/moleculer-repl.html"}},[e._v("REPL")]),e._v(" mode after broker started.")],1)]),e._v(" "),s("tr",[s("td",[s("code",[e._v("-s")]),e._v(", "),s("code",[e._v("--silent")])]),e._v(" "),s("td",[s("code",[e._v("Boolean")])]),e._v(" "),s("td",[s("code",[e._v("false")])]),e._v(" "),s("td",[e._v("Disable the broker logger. It prints nothing to the console.")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("-H")]),e._v(", "),s("code",[e._v("--hot")])]),e._v(" "),s("td",[s("code",[e._v("Boolean")])]),e._v(" "),s("td",[s("code",[e._v("false")])]),e._v(" "),s("td",[e._v("Hot reload services when they change.")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("-c")]),e._v(", "),s("code",[e._v("--config <file>")])]),e._v(" "),s("td",[s("code",[e._v("String")])]),e._v(" "),s("td",[s("code",[e._v("null")])]),e._v(" "),s("td",[e._v("Load configuration file from a different path or a different filename.")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("-e")]),e._v(", "),s("code",[e._v("--env")])]),e._v(" "),s("td",[s("code",[e._v("Boolean")])]),e._v(" "),s("td",[s("code",[e._v("false")])]),e._v(" "),s("td",[e._v("Load envorinment variables from the '.env' file from the current folder.")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("-E")]),e._v(", "),s("code",[e._v("--envfile <file>")])]),e._v(" "),s("td",[s("code",[e._v("String")])]),e._v(" "),s("td",[s("code",[e._v("null")])]),e._v(" "),s("td",[e._v("Load envorinment variables from the specified file.")])]),e._v(" "),s("tr",[s("td",[s("code",[e._v("-i")]),e._v(", "),s("code",[e._v("--instances")])]),e._v(" "),s("td",[s("code",[e._v("Number")])]),e._v(" "),s("td",[s("code",[e._v("null")])]),e._v(" "),s("td",[e._v("Launch [number] node instances (with "),s("code",[e._v("cluster")]),e._v(" module)")])])])]),e._v(" "),s("p",[s("strong",[e._v("Example NPM scripts")])]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"scripts"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"dev"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"moleculer-runner --repl --hot --config moleculer.dev.config.js services"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"start"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"moleculer-runner --instances=4 services"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("The "),s("code",[e._v("dev")]),e._v(" script loads development configurations from the "),s("code",[e._v("moleculer.dev.config.js")]),e._v(" file, start all services from the "),s("code",[e._v("services")]),e._v(" folder, enable hot-reloading and switches to REPL mode. Run it with the "),s("code",[e._v("npm run dev")]),e._v(" command.")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("start")]),e._v(" script is to load the default "),s("code",[e._v("moleculer.config.js")]),e._v(" file if it exists, otherwise only loads options from environment variables. Starts 4 instances of broker, then they start all services from the "),s("code",[e._v("services")]),e._v(" folder. Run it with "),s("code",[e._v("npm start")]),e._v(" command.")]),e._v(" "),s("h2",{attrs:{id:"configuration-loading-logic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration-loading-logic"}},[e._v("#")]),e._v(" Configuration loading logic")]),e._v(" "),s("p",[e._v("The runner does the following steps to load & merge configurations:")]),e._v(" "),s("ol",[s("li",[e._v("It loads config file defined in CLI options. If it does not exist, it throws an error.")]),e._v(" "),s("li",[e._v("If not defined, it loads the "),s("code",[e._v("moleculer.config.js")]),e._v(" file from the current directory. If it does not exist, it loads the "),s("code",[e._v("moleculer.config.json")]),e._v(" file.")]),e._v(" "),s("li",[e._v("Once a config file has been loaded, it merges options with the default options of the ServiceBroker.")]),e._v(" "),s("li",[e._v("The runner observes the options step by step and tries to overwrite them from environment variables. Once "),s("code",[e._v('logLevel: "warn"')]),e._v(" is set in the config file, but the "),s("code",[e._v("LOGLEVEL=debug")]),e._v(" environment variable is defined, the runner overwrites it, and it results: "),s("code",[e._v('logLevel: "debug"')]),e._v(".")])]),e._v(" "),s("blockquote",[s("p",[e._v("To overwrite broker's deeply nested default options, which are not present in "),s("code",[e._v("moleculer.config.js")]),e._v(", via environment variables, use the "),s("code",[e._v("MOL_")]),e._v(" prefix and double underscore "),s("code",[e._v("__")]),e._v(" for nested properties in "),s("code",[e._v(".env")]),e._v(" file. For example, to set the "),s("router-link",{attrs:{to:"/caching.html#Built-in-cachers"}},[e._v("cacher prefix")]),e._v(" to "),s("code",[e._v("MOL")]),e._v(" you should declare as "),s("code",[e._v("MOL_CACHER__OPTIONS__PREFIX=MOL")]),e._v(".")],1)]),e._v(" "),s("h3",{attrs:{id:"configuration-file"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration-file"}},[e._v("#")]),e._v(" Configuration file")]),e._v(" "),s("p",[e._v("The structure of the configuration file is the same as that of the "),s("router-link",{attrs:{to:"/broker.html#Broker-options"}},[e._v("broker options")]),e._v(". Every property has the same name.")],1),e._v(" "),s("p",[s("strong",[e._v("Example config file")])]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("module")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("exports")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    nodeID"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"node-test"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    logger"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    logLevel"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"debug"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\n    transporter"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"nats://localhost:4222"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    requestTimeout"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\n    circuitBreaker"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        enabled"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\n    metrics"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("h3",{attrs:{id:"environment-variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#environment-variables"}},[e._v("#")]),e._v(" Environment variables")]),e._v(" "),s("p",[e._v("The runner transforms the property names to uppercase. If nested, the runner concatenates names with "),s("code",[e._v("_")]),e._v(".")]),e._v(" "),s("p",[s("strong",[e._v("Example environment variables")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("NODEID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("node-test\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("LOGGER")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("LOGLEVEL")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("debug\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Shorthand transporter")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("TRANSPORTER")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("nats://localhost:4222\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("REQUESTTIMEOUT")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5000")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Nested property")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CIRCUITBREAKER_ENABLED")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("METRICS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("true\n")])])]),s("h2",{attrs:{id:"services-loading-logic"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#services-loading-logic"}},[e._v("#")]),e._v(" Services loading logic")]),e._v(" "),s("p",[e._v("The runner loads service files or folders defined in CLI arguments. If you define folder(s), the runner loads all services "),s("code",[e._v("**/*.service.js")]),e._v(" from specified one(s) (including sub-folders too). Services & service folder can be loaded with "),s("code",[e._v("SERVICES")]),e._v(" and "),s("code",[e._v("SERVICEDIR")]),e._v(" environment variables.")]),e._v(" "),s("p",[s("strong",[e._v("Loading steps:")])]),e._v(" "),s("ol",[s("li",[e._v("If "),s("code",[e._v("SERVICEDIR")]),e._v(" env found, but no "),s("code",[e._v("SERVICES")]),e._v(" env, it loads all services from the "),s("code",[e._v("SERVICEDIR")]),e._v(" directory.")]),e._v(" "),s("li",[e._v("If "),s("code",[e._v("SERVICEDIR")]),e._v(" & "),s("code",[e._v("SERVICES")]),e._v(" env found, it loads the specified services from the "),s("code",[e._v("SERVICEDIR")]),e._v(" directory.")]),e._v(" "),s("li",[e._v("If no "),s("code",[e._v("SERVICEDIR")]),e._v(", but "),s("code",[e._v("SERVICES")]),e._v(" env found, it loads the specified services from the current directory.")]),e._v(" "),s("li",[e._v("Check the CLI arguments. If filename found, it loads them. If directory found, it loads them. It glob pattern found, it applies and load the found files.")])]),e._v(" "),s("blockquote",[s("p",[e._v("Please note: shorthand names can also be used in "),s("code",[e._v("SERVICES")]),e._v(" env var.")])]),e._v(" "),s("p",[s("strong",[e._v("Example")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("SERVICEDIR=services\nSERVICES=math,post,user\n")])])]),s("p",[e._v("It loads the "),s("code",[e._v("math.service.js")]),e._v(", "),s("code",[e._v("post.service.js")]),e._v(" and "),s("code",[e._v("user.service.js")]),e._v(" files from the "),s("code",[e._v("services")]),e._v(" folder.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("SERVICEDIR=my-services\n")])])]),s("p",[e._v("It loads all "),s("code",[e._v("*.service.js")]),e._v(" files from the "),s("code",[e._v("my-services")]),e._v(" folder (including sub-folders too).")]),e._v(" "),s("h3",{attrs:{id:"glob-patterns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#glob-patterns"}},[e._v("#")]),e._v(" Glob patterns")]),e._v(" "),s("p",[e._v("If you want to be more specific, use glob patterns. It is useful when loading all services except certain ones.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ moleculer-runner services "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("services/others/**/*.service.js services/others/mandatory/main.service.js\n")])])]),s("p",[s("strong",[e._v("Explanations:")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("services")]),e._v(" - legacy mode. Load all services from the "),s("code",[e._v("services")]),e._v(" folder with "),s("code",[e._v("**/*.service.js")]),e._v(" file mask.")]),e._v(" "),s("li",[s("code",[e._v("!services/others/**/*.service.js")]),e._v(" - skip all services in the "),s("code",[e._v("services/others")]),e._v(" folder and sub-folders.")]),e._v(" "),s("li",[s("code",[e._v("services/others/mandatory/main.service.js")]),e._v(" - load the exact service.")])]),e._v(" "),s("blockquote",[s("p",[e._v("The glob patterns work in the "),s("code",[e._v("SERVICES")]),e._v(" enviroment variables, as well.")])]),e._v(" "),s("h2",{attrs:{id:"built-in-clustering"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#built-in-clustering"}},[e._v("#")]),e._v(" Built-in clustering")]),e._v(" "),s("p",[e._v("Moleculer Runner has a built-in clustering function to start multiple instances from your broker.")]),e._v(" "),s("p",[e._v("Example to start all services from the "),s("code",[e._v("services")]),e._v(" folder in 4 instances.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("$ moleculer-runner --instances "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" services\n")])])]),s("p",[e._v("{% note info Clustered Node ID %}\nThe "),s("code",[e._v("nodeID")]),e._v(" will be suffixed with the worker ID. E.g. if you define "),s("code",[e._v("my-node")]),e._v(" nodeID in options, and starts 4 instances, the instance nodeIDs will be "),s("code",[e._v("my-node-1")]),e._v(", "),s("code",[e._v("my-node-2")]),e._v(", "),s("code",[e._v("my-node-3")]),e._v(", "),s("code",[e._v("my-node-4")]),e._v(".\n:::")]),e._v(" "),s("h2",{attrs:{id:"env-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#env-files"}},[e._v("#")]),e._v(" .env files")]),e._v(" "),s("p",[e._v("Moleculer runner can load "),s("code",[e._v(".env")]),e._v(" file at starting. There are two new cli options to load env file:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("-e, --env")]),e._v(" - Load envorinment variables from the '.env' file from the current folder.")]),e._v(" "),s("li",[s("code",[e._v("-E, --envfile <filename>")]),e._v(" - Load envorinment variables from the specified file.")])]),e._v(" "),s("p",[s("strong",[e._v("Example")])]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Load the default .env file from current directory")]),e._v("\n$ moleculer-runner --env\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Load the specified .my-env file")]),e._v("\n$ moleculer-runner --envfile .my-env\n")])])]),s("p",[e._v("{% note info Dependencies %}\nTo use this feature install the "),s("code",[e._v("dotenv")]),e._v(" module with "),s("code",[e._v("npm install dotenv --save")]),e._v(" command.\n:::")])])}),[],!1,null,null,null);t.default=n.exports}}]);